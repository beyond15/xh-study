
1.要学会使用github记笔记
2.git切换远程分支
3.git tag 的使用


如何使用git切换远程分支？
git clone只能clone远程库的master分支，无法clone所有分支。（或者说是default分支），解决方法如下：
1. 找一个干净目录，假设是git_work
2. cd git_work
3. git clone http://myrepo.xxx.com/project/.git ,这样在git_work目录下得到一个project子目录
4. cd project
5. git branch -a，列出所有分支名称如下：
remotes/origin/dev
remotes/origin/release
6. git checkout -b dev origin/dev，作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支
7. git checkout -b release origin/release，作用参见上一步解释
8. git checkout dev，切换回dev分支，并开始开发。


git tag
作用：标签可以针对某一时间点的版本做一个标记。可以记录到这个阶段的代码情况。
标签分类：轻量标签和附注标签。
轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象，建议使用附注标签，日后还可以查看标签信息。

1.创建标签
创建轻量标签
git tag v0.2.0 -light
解释：创建轻量标签不需要传递参数，直接指定标签名称即可。

创建附注标签
git tag -a v0.1.0 -m "release 0.1.0 version"
解释：创建附注标签时，参数-a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。

2.查看标签
列出当前仓库的所有标签
git tag

列出符合模式的标签
git tag -l 'v0.1.*'

查看标签版本信息
git show v0.1.0

3.切换标签
切换标签与切换分支命令相同
git checkout [tagname]
解释：切换标签后处于一个空的分支上，即”You are in ‘detached HEAD’ state.”

4.删除标签
误打或需要修改标签时，需要先将标签删除，再打新标签
git tag -d v0.1.2
解释：参数-d即delete的缩写，意为删除其后指定的标签。

5.补打标签
给指定的commit打标签
git tag -a v0.1.0 49e0cd22f6bd9510fe65084e023d9c4316b446a6
解释：打标签不必要在HEAD之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和，通过git log命令获取。

6.发布标签
将v0.1.0标签提交到git服务器
git push origin v0.1.0
解释：通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作。

将本地所有标签一次性提交到git服务器
git push origin -–tags


特殊情况：比如我们在查看别人源码，查看tag1标签的源码，修改了东西，现在需要改到tag7需要这么做。
Git冲突：commit your changes or stash them before you can merge.

1.stash  （git储藏）
git stash
git pull
git stash pop

接下来diff一下此文件看看自动合并的情况，并作出相应修改。

git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。


2.放弃本地修改，直接覆盖之。
git reset --hard
git pull

