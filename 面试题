Java基础
1、集合类以及集合框架；HashMap与HashTable实现原理，线程安全性，hash冲突及处理算法；ConcurrentHashMap；

2、进程和线程的区别；

3、Java的并发、多线程、线程模型；

4、什么是线程池，如何使用?

答：线程池就是事先将多个线程对象放到一个容器中，当使用的时候就不用new 线程而是直接去池中拿线程即可，节省了开辟子线程的时间，提高的代码执行效率。

5、数据一致性如何保证；Synchronized关键字，类锁，方法锁，重入锁；

6、Java中实现多态的机制是什么；

7、如何将一个Java对象序列化到文件里；

8、说说你对Java反射的理解；

答：Java 中的反射首先是能够获取到Java 中要反射类的字节码， 获取字节码有三种方法，

(1).Class.forName(className)

(2).类名.class

(3).this.getClass()。

然后将字节码中的方法，变量，构造函数等映射成相应的Method、Filed、Constructor 等类，这些类提供了丰富的方法可以被我们所使用。

9、同步的方法；多进程开发以及多进程应用场景；

10、在Java中wait和seelp方法的不同；

答：最大的不同是在等待时wait 会释放锁，而sleep 一直持有锁。wait 通常被用于线程间交互，sleep 通常被用于暂停执行。

11、synchronized 和volatile 关键字的作用；

答：

1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。

2）禁止进行指令重排序。

12、volatile 本质是在告诉jvm 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。

(1).volatile 仅能使用在变量级别；synchronized 则可以使用在变量、方法、和类级别的

(2).volatile 仅能实现变量的修改可见性，并不能保证原子性；synchronized 则可以保证变量的修改可见性和原子性

(3).volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。

(4).volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化

13、服务器只提供数据接收接口，在多线程或多进程条件下，如何保证数据的有序到达；

14、ThreadLocal原理，实现及如何保证Local属性；

15、String StringBuilder StringBuffer对比；

16、你所知道的设计模式有哪些；

答：

Java 中一般认为有23 种设计模式，我们不需要所有的都会，但是其中常用的几种设计模式应该去掌握。下面列出了所有的设计模式。需要掌握的设计模式我单独列出来了，当然能掌握的越多越好。

总体来说设计模式分为三大类：

创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。

结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。

行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。

17、Java如何调用c、c++语言；

18、接口与回调；回调的原理；写一个回调demo；

19、泛型原理，举例说明；解析与分派；

20、抽象类与接口的区别；应用场景；抽象类是否可以没有方法和属性；

21、静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？

22、修改对象A的equals方法的签名，那么使用HashMap存放这个对象实例的时候，会调用哪个equals方法；

23、说说你对泛型的了解；

24、Java的异常体系；

25、如何控制某个方法允许并发访问线程的个数；

26、动态代理的区别，什么场景使用；

27、Dex加载过程和优化方式；

28、Jvm和Gc机制；

29、常用的设计模式。

高级“

高级题目
开发中Java用了比较多的数据结构有哪些？

谈谈你对HashMap怎么解决碰撞问题的？这些数据结构中是线程安全嘛？加入回答HashMap不是线程安全的，HashTab是线程安全的，接着问你有没有线程安全的map，接下来问了concurren包

对JVM熟不熟悉？简单说说类加载过程，里面执行的哪些操作？问了GC和内存管理，平时在tomcat里面有没有进行过相关的配置

然后问了http协议，get和post的基本区别，接着tcp/ip协议，三次握手，窗口滑动机制。

开发中用了哪些数据库？回答mysql，存储引擎有哪些？然后问了我悲观锁和乐观锁问题使用场景、分布式集群实现的原理。

然后问了我springmvc和mybatis的工作yuanl,有没有看过底层源码？

想学习交流HashMap,nginx、dubbo、Spring MVC,分布式、高性能高可用、redis、jvm、多线程、netty、kafka、的加群：190713474 加群获取资料学习，无工作经验不要加哦！




数据结构与算法
1、堆和栈在内存中的区别是什么(数据结构方面以及实际实现方面)；

2、最快的排序算法是哪个？给阿里2万多名员工按年龄排序应该选择哪个算法？堆和树的区别；写出快排代码；链表逆序代码；

3、求1000以内的水仙花数以及40亿以内的水仙花数；

4、子串包含问题(KMP 算法)写代码实现；

5、万亿级别的两个URL文件A和B，如何求出A和B的差集C,(Bit映射->hash分组->多文件读写效率->磁盘寻址以及应用层面对寻址的优化)

6蚁群算法与蒙特卡洛算法；

7、写出你所知道的排序算法及时空复杂度，稳定性；

8、百度POI中如何试下查找最近的商家功能(坐标镜像+R树)。

9、遍历二叉树

10、自己集合实现一个队列

11、自己实现线程安全类

12、快速排序和冒泡的排序，怎么转换一下。

其它

1、死锁的四个必要条件；

2、常见编码方式；utf-8编码中的中文占几个字节；int型几个字节；

3、实现一个Json解析器(可以通过正则提高速度)；

4、MVC MVP MVVM; 常见的设计模式；写出观察者模式的代码；

5、TCP的3次握手和四次挥手；TCP与UDP的区别；

6、HTTP协议；HTTP1.0与2.0的区别；HTTP报文结构；

7、HTTP与HTTPS的区别以及如何实现安全性；

8、都使用过哪些框架、平台；

9、都使用过哪些自定义控件；

10、介绍你做过的哪些项目；

“

非技术问题汇总
1、研究比较深入的领域有哪些；

2、对业内信息的关注渠道有哪些；

3、最近都读哪些书；

4、自己最擅长的技术点，最感兴趣的技术领域和技术点；

5、项目中用了哪些开源库，如何避免因为引入开源库而导致的安全性和稳定性问题；

6、实习过程中做了什么，有什么产出；

7、5枚硬币，2正3反如何划分为两堆然后通过翻转让两堆中正面向上的硬8币和反面向上的硬币个数相同；

8、时针走一圈，时针分针重合几次；

9、N * N的方格纸,里面有多少个正方形；

10、现在下载速度很慢,试从网络协议的角度分析原因,并优化(网络的5层都可以涉及)。

“

HR问题汇总
1、您在前一家公司的离职原因是什么？

2、讲一件你印象最深的一件事情；

3、介绍一个你影响最深的项目；

4、介绍你最热爱最擅长的专业领域；

5、公司实习最大的收获是什么；

6、与上级意见不一致时，你将怎么办；

7、自己的优点和缺点是什么？并举例说明？

8、你的学习方法是什么样的？实习过程中如何学习？实习项目中遇到的最9、大困难是什么以及如何解决的；

10、说一件最能证明你能力的事情；

11、针对你你申请的这个职位，你认为你还欠缺什么；

12、如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本13、不适合这个职位，你怎么办；

14、项目中遇到最大的困难是什么？如何解决的；

15、你的职业规划以及个人目标；未来发展路线及求职定位；

16、如果你在这次面试中没有被录用，你怎么打算；

17、评价下自己，评价下自己的技术水平，个人代码量如何；

18、通过哪些渠道了解的招聘信息，其他同学都投了哪些公司；

19、业余都有哪些爱好；

20、你做过的哪件事最令自己感到骄傲；

21、假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办；

22、就你申请的这个职位，你认为你还欠缺什么；

23、当前的offer状况；如果BATH都给了offer该如何选；

24、你对一份工作更看重哪些方面？平台，技术，氛围，城市，money；

25、理想薪资范围；杭州岗和北京岗选哪个；

26、理想中的工作环境是什么；

27、谈谈你对跳槽的看法；

28、说说你对行业、技术发展趋势的看法；

29、实习过程中周围同事/同学有哪些值得学习的地方；

30、家人对你的工作期望及自己的工作期望；

31、如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办；

32、若上司在公开会议上误会你了，该如何解决；

32、是否可以实习，可以实习多久；

33、在五年的时间内，你的职业规划；

34、你看中公司的什么？或者公司的那些方面最吸引你。


--------------------- 
作者：yalin7076 
来源：CSDN 
原文：https://blog.csdn.net/yalin7076/article/details/78985314 
版权声明：本文为博主原创文章，转载请附上博文链接！
